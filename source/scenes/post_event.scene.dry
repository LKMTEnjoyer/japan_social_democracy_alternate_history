title: Post Event
new-page: true
on-arrival: {!

// Radicalization

if (Q.radicalism > (Q.jsp_votes + Q.jcp_votes)) {
    if (Q.radicalism > 90) {
        Q.blue_collar_ldp -= 5/12;
        Q.white_collar_ldp -= 4/12;
        Q.enterprise_workers_ldp -= 3/12;
        Q.self_employed_ldp -= 2/12;
        Q.rural_workers_ldp -= 3/12;
        Q.unemployed_ldp -= 8/12;
        Q.youth_ldp -= 8/12;
        Q.urban_migrants_ldp -= 4/12;
    } else if (Q.radicalism > 70) {
        Q.blue_collar_ldp -= 3/12;
        Q.white_collar_ldp -= 2/12;
        Q.rural_workers_ldp -= 1/12;
        Q.enterprise_workers_ldp -= 1/12;
        Q.unemployed_ldp -= 4/12;
        Q.youth_ldp -= 4/12;
        Q.urban_migrants_ldp -= 2/12;
    } else if (Q.radicalism > 60) {
        Q.blue_collar_ldp -= 1/12;
        Q.enterprise_workers_ldp -= 1/12;
        Q.unemployed_ldp -= 1/12;
        Q.youth_ldp -= 2/12;
        Q.urban_migrants_ldp -= 1/12;
    } else if (Q.radicalism > 40) {
        Q.white_collar_other += 2/12;
        Q.enterprise_workers_other += 2/12;
        Q.self_employed_other += 1/12;
        Q.rural_workers_other += 1/12;
        Q.urban_migrants_other += 2/12;
    
    } else if (Q.radicalism > 20) {
        Q.blue_collar_ldp += 1/12;
        Q.white_collar_ldp += 1/12;
        Q.enterprise_workers_ldp += 2/12;
        Q.self_employed_ldp += 3/12;
        Q.rural_workers_ldp += 3/12;
        Q.unemployed_ldp += 1/12;
        Q.urban_migrants_ldp += 1/12;
    } else {
        Q.blue_collar_ldp += 2/12;
        Q.white_collar_ldp += 3/12;
        Q.enterprise_workers_ldp += 3/12;
        Q.self_employed_ldp += 5/12;
        Q.rural_workers_ldp += 4/12;
        Q.unemployed_ldp += 2/12;
        Q.urban_migrants_ldp += 3/12;

    }
}







Q.radicalism -= 1;
Q.radicalism += Q.shaseido_effects/10;
if (Q.income_doubling_plan == 1) {
    Q.radicalism -= growth_rate/3;
}
if (Q.anpo_active == 1) {
    Q.radicalism += Q.anpo_intensity;
    Q.radicalism += Q.anpo_opposition/10;
}
if (Q.miike_active == 1) {
    Q.radicalism += Q.sohyo_effects/20;
}


// make sure no stat is below 0.
for (var c of Q.classes) {
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
    }
}
for (var e of Q.mass_organization_effects) {
    Q[e+'_multiplier'] = 1;
}
// Sohyo
Q.blue_collar_jsp_multiplier += Q.sohyo_effects/200;
Q.unemployed_jsp_multiplier += Q.sohyo_effects/200;
// Zenro
Q.white_collar_jsp_multiplier += Q.zenro_effects/150;
Q.self_employed_jsp_multiplier += Q.zenro_effects/150;
Q.enterprise_workers_jsp_multiplier += Q.zenro_effects/150;
// Youth
Q.youth_jsp_multiplier += Q.shaseido_effects/100;
Q.radicalism_multiplier += Q.shaseido_effects/100;
Q.progressivism_multiplier += Q.shaseido_effects/100;
// Gensuikyo
Q.pacifism_multiplier  += Q.gensuikyo_effects/200;
Q.anti_imperialism_multiplier += Q.gensuikyo_effects/200;
// Nichino
Q.rural_workers_jsp_multiplier += Q.nichino_effects/100;
// Gokenrengō
Q.pro_democracy_multiplier += Q.gokenrengo_effects/100;
// Party membership
Q.socialism_multiplier += Q.party_membership/500;
Q.blue_collar_jsp_multiplier += Q.party_membership/1000;
Q.white_collar_jsp_multiplier += Q.party_membership/1000;
Q.enterprise_workers_jsp_multiplier += Q.party_membership/1000;
Q.self_employed_jsp_multiplier += Q.party_membership/1000;
Q.rural_workers_jsp_multiplier += Q.party_membership/1000;
Q.urban_migrants_jsp_multiplier += Q.party_membership/1000;
Q.unemployed_jsp_multiplier += Q.party_membership/1000;
Q.youth_jsp_multiplier += Q.party_membership/1000;

for (var e of Q.mass_organization_effects) {   
    if (Q[e+'_gain'] > 0) {
        console.log(Q[e+'_multiplier'])
        Q[e] += Q[e+'_gain']*Q[e+'_multiplier'];
        Q[e+'_gain'] = 0;
    }
}
Q.pro_republic = Math.round(Q.pro_republic);
Q.nationalism = Math.round(Q.nationalism);
Q.socialism = Math.round(Q.socialism);
for (var c of Q.mass_orgs) {
    if (Q[c+'_strength'] < 0) {
        Q[c+'_strength'] = 0;   
    }
    if (Q[c+'_loyalty'] > 100) {
        Q[c+'_loyalty'] = 100;
    }
    if (Q[c+'_loyalty'] < 0) {
        Q[c+'_loyalty'] = 0;
    }
}
for (var c of Q.mass_orgs) {
    Q[c+'_effects'] =Math.round((Q[c+'_loyalty']-50)*0.02*(Q[c+'_strength']**0.5));     
}
if (Q.pro_republic < 0) {
    Q.pro_republic = 0;
}
if (Q.pro_republic >= 100) {
    Q.pro_republic = 99;
}
// re-calculate party support
// calculate normalized class voting for the achievements
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}
// calculate support for each of the parties
var total_support = 0; 
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        if (Q.old_demographics) { 
            party_support += Q[c]*Q[c+'_'+party];
        } else  { 
            party_support += Q[c]*Q[c+'_'+party+'_normalized'];
        } 
    }
    Q[party + '_support'] = party_support;
    total_support += party_support; 
}
// 2. normalize support (fraction)
for (var party of Q.parties) {
    Q[party+'_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_votes'] = Math.round(Q[party+'_normalized']*1000)/10;
}


// set faction strength/dissent to 0
for (var c of Q.factions) {
    if (Q[c+'_dissent'] < 0) {
        Q[c+'_dissent'] = 0;
    } else if (Q[c+'_dissent'] >= 100) {
        Q[c+'_dissent'] = 99;
    }
    if (Q[c+'_strength'] < 0) {
        Q[c+'_strength'] = 0;
    }
}

if (Q.unemployed <= 1) {
    Q.unemployed = 1;
}

// re-calculate dissent.
var total_strength = Q.left_strength + Q.center_strength + Q.left_org_strength + Q.right_strength + Q.reconstructionist_strength;

// normalize strength for the different factions
Q.left_strength = 100*Q.left_strength/total_strength;
Q.center_strength = 100*Q.center_strength/total_strength;
Q.left_org_strength = 100*Q.left_org_strength/total_strength;
Q.right_strength = 100*Q.right_strength/total_strength;
Q.reconstructionist_strength = 100*Q.reconstructionist_strength/total_strength;

var total_dissent = Q.left_strength*Q.left_dissent + Q.center_strength*Q.center_dissent + Q.left_org_strength*Q.left_org_dissent + Q.right_strength*Q.right_dissent + Q.reconstructionist_strength*Q.reconstructionist_dissent;


Q.dissent = 0.01*total_dissent/total_strength;
Q.dissent_percent = Q.dissent*100;
console.log('new dissent: ' + Q.dissent);

if (Q.dissent < 0) {
    Q.dissent = 0;
} else if (Q.dissent > 0.95) {
    Q.dissent = 0.95;
}

// 1. update dates
if (Q.month_actions >= 1) {
    Q.time += 1;
    Q.month_actions = 0;
    Q.month += 1;
    if (Q.month >= 13) {
        Q.month = 1;
        Q.year += 1;
        if (Q.historical_mode) {
            Q.resources += 2;
        }
    }
    // decrement timers
    for (timer of Q.timers) {
        if (Q[timer+'_timer'] && Q[timer+'_timer'] > 0) {
            Q[timer+'_timer'] -= 1;
        }
    }
    // TODO: append to historical party support records
    var party_support_results = {'date': new Date(Q.year, Q.month - 1)};
    for (var party of Q.parties) {
        party_support_results[party] = Q[party + '_normalized']*100;
    }
    Q.party_support_records.push(party_support_results);
    Q.economic_records.push({'date': new Date(Q.year, Q.month - 1),
                             'inflation': Q.inflation,
                             'unemployment': Q.unemployed});
    // change economic stats...
    // we're basically implicity drawing a Philips curve
    // budget deficits lead to some inflation
    if (Q.budget <= 0 && Q.budget > -2 && Q.inflation < 2.5) {
        Q.inflation += 0.1;
    }
    if (Q.budget <= -2 && Q.budget > -5 && Q.inflation < 5) {
        Q.inflation += 0.2;
        if (Q.unemployed >= 12) {
            Q.inflation -= 0.1;
        }
    }
    if (Q.budget <= -5 && Q.inflation < 10) {
        Q.inflation += 0.3;
        if (Q.unemployed >= 15) {
            Q.inflation -= 0.1;
        }
    }
    // deflation is bad
    if (Q.inflation < -0.5 && Q.inflation > -5 && Q.unemployed < 15) {
        Q.unemployed += 0.2;
    }
    if (Q.inflation <= -5 && Q.unemployed < 20) {
        Q.unemployed += 0.3;
    }
}
Q.has_event = 0;
// check if there are any cards in #event, and then go to main if not.
var scene = this.game.scenes['post_event.events_choice'];
var choices = this._compileChoices(scene);
if (choices && choices[0].title != "Continue...") {
    Q.has_event = 1;
} else {
    Q.has_event = 0;
}

if (typeof window !== "undefined" && window.generateBar) {
}
!}
go-to: events_choice if has_event = 1; main if has_event = 0 and difficulty >= 0; main.main_easy if has_event = 0 and difficulty < 0

= [+ month : month +] [+ year +]

@events_choice

- #event

# This scene is solely for updating numbers after events, and routing to special events.